{{$app := .AppName | kebabcase}}
{{$clusterName := .ClusterName | kebabcase}}
{{$appEnv := printf "azure-aks-%s" $clusterName}}
apiVersion: xl-release/v1
kind: Templates
spec:
- name: {{$app}}
  type: xlrelease.Folder
  children:
  - name: {{$app}}-ci-cd
    type: xlrelease.Release
    description: |
      This XL Release template shows how to deploy an application, based on microservices architecture, to Azure AKS using XL Deploy and Terraform.
    tags:
    - Azure
    - AKS
    - Terraform
    - {{$app}}
    scriptUsername: !value XL_RELEASE_USERNAME
    scriptUserPassword: !value XL_RELEASE_PASSWORD
    variables:
    - key: control
      type: xlrelease.MapStringStringVariable
      requiresValue: false
      showOnReleaseStart: false
      value:
        namespace: {{.Namespace}}
        serviceName: store
    - key: lbHostnameOrIp
      type: xlrelease.StringVariable
      requiresValue: false
      showOnReleaseStart: false

    - key: store-admin-username
      type: xlrelease.StringVariable
      requiresValue: true
      showOnReleaseStart: false
      value: {{.StoreAdminUsername}}
    - key: store-admin-password
      type: xlrelease.StringVariable
      requiresValue: true
      showOnReleaseStart: false
      value: {{.StoreAdminPassword}}
    - key: xld-admin-password
      type: xlrelease.PasswordStringVariable
      requiresValue: true
      showOnReleaseStart: false
      value: !value XL_DEPLOY_PASSWORD
    phases:
    {{if .ProvisionCluster }}
    - name: Provision Infrastructure
      color: '#ff9e3b'
      type: xlrelease.Phase
      tasks:
      - name: Provision Azure AKS cluster
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{$app}}/AKS-TERRAFORM/{{$app}}-terraform-aks/1.0.0
        deploymentEnvironment: Environments/{{$app}}/azure-terraform
    {{end}}
    {{if .enableCICD }}
    - name: Build {{$app}} application
      type: xlrelease.Phase
      tasks:
      - name: Build docker images for {{$app}} services
        type: xlrelease.ParallelGroup
        tasks:
        - name: Build {{$app}} store docker image
          type: jenkins.Build
          jenkinsServer: jenkins
          jobName: devops-as-code-blueprint-store-svc
          owner: admin
        - name: Build {{$app}} notification docker image
          type: jenkins.Build
          jenkinsServer: jenkins
          jobName: devops-as-code-blueprint-notification-svc
          owner: admin
        - name: Build {{$app}} invoice docker image
          type: jenkins.Build
          jenkinsServer: jenkins
          jobName: devops-as-code-blueprint-invoice-svc
          owner: admin
    {{end}}
    - name: Deploy {{$app}} application
      type: xlrelease.Phase
      tasks:
      {{if .ProvisionCluster }}
      - name: Deploy {{.Namespace}} namespace
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{$app}}/K8S/{{$app}}-namespace/1.0.0
        deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
      {{end}}
      - name: Deploy stateful services
        type: xlrelease.ParallelGroup
        tasks:
        - name: Deploy invoice mysql svc
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: {{$app}}/K8S/{{$app}}-invoice-mysql/1.0.0
          deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
        - name: Deploy store mysql svc
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: {{$app}}/K8S/{{$app}}-store-mysql/1.0.0
          deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
        - name: Deploy notification mongodb svc
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: {{$app}}/K8S/{{$app}}-notification-mongodb/1.0.0
          deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
      - name: Deploy stateless services
        type: xlrelease.SequentialGroup
        tasks:
        - name: Deploy registry svc
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: {{$app}}/K8S/{{$app}}-registry/1.0.0
          deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
        - name: Deploy microservices
          type: xlrelease.ParallelGroup
          tasks:
          - name: Deploy invoice svc
            type: xldeploy.Deploy
            server: XL Deploy
            deploymentPackage: {{$app}}/K8S/{{$app}}-invoice/1.0.0
            deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
          - name: Deploy notification svc
            type: xldeploy.Deploy
            server: XL Deploy
            deploymentPackage: {{$app}}/K8S/{{$app}}-notification/1.0.0
            deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
          - name: Deploy store svc
            type: xldeploy.Deploy
            server: XL Deploy
            deploymentPackage: {{$app}}/K8S/{{$app}}-store/1.0.0
            deploymentEnvironment: Environments/{{$app}}/{{$appEnv}}
    - name: Test
      type: xlrelease.Phase
      tasks:
      - name: Get Store service public URL
        type: xlrelease.SequentialGroup
        tasks:
        - name: Get Store k8s service specs
          type: xldeploy.Controltask
          server: XL Deploy
          numberOfContinueRetrials: 100
          pollingInterval: 10
          ciId: Infrastructure/{{$app}}/azure-aks-{{$clusterName}}
          taskName: describeService
          variableMapping:
            pythonScript.xlDeployTaskId: ${taskId}
            pythonScript.parameters: ${control}
        - name: Parse Store k8s service
          type: webhook.XmlWebhook
          URL: {{.XLDUrlForXLR}}/deployit/tasks/v2/export
          method: GET
          username: !value XL_DEPLOY_USERNAME
          xPathExpression: "/list/task[@id=\"${taskId}\"]//log/text()"
          variableMapping:
            pythonScript.result: ${taskOutput}
            pythonScript.password: ${xld-admin-password}
        - name: Get Store k8s service ip or hostname
          type: xlrelease.ScriptTask
          script: |
            import re
            m = re.search('hostname:(.*)\nip:([0-9.]+|None)', releaseVariables['taskOutput'])
            ipHostname = [m.group(1),m.group(2)]
            for item in ipHostname:
                if "None" not in item:
                    releaseVariables['lbHostnameOrIp'] = item
          # end of script
      - name: Check {{$app}} application status
        type: xlrelease.ScriptTask
        script: |
          import urllib2
          import json
          import time

          time.sleep(60)
          token_url = 'http://${lbHostnameOrIp}:8080/jhipster-registry/api/authenticate'
          instances_url = 'http://${lbHostnameOrIp}:8080/jhipster-registry/api/eureka/applications'
          values = {"password": "${store-admin-password}",
                    "rememberMe": "false",
                    "username": "${store-admin-username}" }


          def make_req(url, body=None, token=None):
              req = urllib2.Request(url, json.dumps(body) if body else None, headers={'Content-type': 'application/json', 'Accept': 'application/json', 'Authorization': 'Bearer %s' % token})
              opener = urllib2.build_opener()
              response = opener.open(req)
              return json.loads(response.read())

          token = make_req(token_url, body=values)['id_token']
          resp = make_req(instances_url, token=token)
          if len(resp['applications']) == 4:
              print "All instances are registered"
          else:
              print "Not all instances are registered. Only {0} are registered".format(len(resp['applications']))
              exit(1)
        # end of script
      - name: Verify application
        type: xlrelease.GateTask
        team: Release Admin
        description: |
          The {{$app}} app is now live on AKS!
          Check out the web site and complete this task when done.

          URL => http://${lbHostnameOrIp}:8080
