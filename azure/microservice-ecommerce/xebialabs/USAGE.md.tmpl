{{$app := .AppName | kebabcase}}

# Prerequisites
* You must have [Docker](https://docs.docker.com/install/) for your platfo
* You must have [docker-compose](https://docs.docker.com/compose/install/) installed

# Launch local environment

Follow the below instructions to get XLD and XLR (and Jenkins) running so you can deploy the blueprint.

## Step 1: Set environment variables (if you are using Jenkins CI/CD)

If you intend to use the Jenkins CI/CD pipeline to generate your own Docker images, you will need to set the following environment variables before running `docker-compose up` (see below) in the same terminal session:

```ini
GITHUB_USER=<GITHUB USER>
GITHUB_TOKEN=<GITHUB API TOKEN>
DOCKER_USER=<YOUR DOCKER USERNAME>
DOCKER_PASS=<YOUR DOCKER PASSWORD>
```

You will also need to modify the Docker image names to your own GitHub user account.

1. Replace the occurrences of `xebialabsunsupported` in the `kubernetes/*-deployment.yml` files with your own DockerHub ID
2. Push the cloned repository to your GitHub account so that Jenkins can checkout `https://github.com/${GITHUB_USER}/e-commerce-microservice.git`

## Step 2: Make sure XL Deploy and XL Release (and Jenkins) are running

> **Note:** If you already have XL Deploy and XL Release (and Jenkins) servers running, you can skip this step.

The blueprint generates `docker/docker-compose.yml`. This will start up XLD and XLR (and Jenkins). Inside the `e-commerce-microservice` directory run:

```plain
cd docker
docker-compose up
```

This will start the services and take control of the terminal. You will need to open a new terminal to continue.

> **Note:** Watch the log output for `docker_xl-cli_1`. Its job is to connect XL Release to XL Deploy. It must exit with code `0`. If not, open a new terminal in the same directory and run:
```plain
docker-compose up -d xl-cli
```

## Step 3: Deploy the blueprint

1. Inside the `e-commerce-microservice` directory, apply the generated `.yaml` configurations using the XL CLI.

```plain
xl apply -f xebialabs.yaml
```

2. Go to XL Release (default http://localhost:5516) and look for the "{{$app}}-ci-cd" template and start a new release from it.
3. Once you are done, go back to XL Release, look for the "{{$app}}-destroy" template and start a new release from it to automatically rollback and destroy the resources you created.

## Minimum Required versions

This blueprint version requires at least the below versions of the specified tools to work properly.

XL Release: Version 8.6
XL Deploy: Version 8.6.1
XL CLI: Version 8.6
