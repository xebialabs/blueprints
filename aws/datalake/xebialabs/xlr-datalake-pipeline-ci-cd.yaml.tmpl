apiVersion: xl-release/v1
kind: Templates
spec:
- name: AWS-DATA-LAKE
  type: xlrelease.Folder
  children:
  - name: datalake-ci-cd
    type: xlrelease.Release
    description: |
      This XL Release template deploys a data lake architecture to AWS using XL Deploy.
    tags:
    - data-lake
    - ECS
    - Fargate
    scriptUsername: !value XL_RELEASE_USERNAME
    scriptUserPassword: !value XL_RELEASE_PASSWORD
    variables:
    - key: "DATALAKE_CONSOLE_URL"
      type: xlrelease.StringVariable
      requiresValue: false
      showOnReleaseStart: false
    - key: "COGNITO_USER_POOL_ID"
      type: xlrelease.StringVariable
      requiresValue: false
      showOnReleaseStart: false
    phases:
    - name: Create artifacts
      color: '#ff9e3b'
      type: xlrelease.Phase
      tasks:
      - name: Create S3 bucket for artifacts
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: DATA-LAKE/aws-data-lake-solution-bucket/1.0.0
        deploymentEnvironment: Environments/DATA-LAKE/AWS-DATA-LAKE
      - name: Upload artifacts to S3
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: DATA-LAKE/aws-data-lake-solution-artifacts/1.0.0
        deploymentEnvironment: Environments/DATA-LAKE/AWS-DATA-LAKE
    - name: Provision CloudFormation stack
      color: '#ff9e3b'
      type: xlrelease.Phase
      tasks:
      - name: Provision CloudFormation Infrastructure and lambda applications
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: DATA-LAKE/aws-data-lake-solution-cloudformation/1.0.0
        deploymentEnvironment: Environments/DATA-LAKE/AWS-DATA-LAKE
    # Get the application URL and verify
    - name: Test
      type: xlrelease.Phase
      tasks:
      - name: Get data lake console URL
        type: xlrelease.SequentialGroup
        tasks:
        - name: Get console URL
          type: xld.GetCIMapPropertyKey
          server: XL Deploy
          ciID: Environments/DATA-LAKE/provision-data-lake-stack-dictionary
          ciPropertyName: entries
          ciPropertyNameKey: ConsoleUrl
          variableMapping:
            pythonScript.ciPropertyValue: ${DATALAKE_CONSOLE_URL}
        - name: Get cognito user pool ID
          type: xld.GetCIMapPropertyKey
          server: XL Deploy
          ciID: Environments/DATA-LAKE/provision-data-lake-stack-dictionary
          ciPropertyName: entries
          ciPropertyNameKey: UserPoolId
          variableMapping:
            pythonScript.ciPropertyValue: ${COGNITO_USER_POOL_ID}

      - name: Check data lake application access
        type: xlrelease.ScriptTask
        script: |
          import urllib2

          health_url = '${DATALAKE_CONSOLE_URL}'

          def make_req(url):
              req = urllib2.Request(url)
              opener = urllib2.build_opener()
              response = opener.open(req)
              return response.getcode()

          resp = make_req(health_url)
          if resp == 200:
              print 'Application is in good health'
          else:
              print 'Application is not in good health'
              exit(1)
        # end of script
      - name: Verify application
        type: xlrelease.GateTask
        team: Release Admin
        description: |
          The data lake app is now live on AWS!
          Check out the console and complete this task when done.
          Your username for the application is {{.AdministratorEmail}} and password is sent to {{.AdministratorEmail}}

          URL => ${DATALAKE_CONSOLE_URL}
