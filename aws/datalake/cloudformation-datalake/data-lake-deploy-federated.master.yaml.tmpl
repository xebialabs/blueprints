AWSTemplateFormatVersion: "2010-09-09"

Description: "(SO0017) - The AWS CloudFormation template for deployment of the AWS Data Lake AD Federated resources. Version latest"

Parameters:
    CognitoDomain:
        Type: String
        Description: Prefixed domain names can only contain lower-case letters, numbers, and hyphens.
        AllowedPattern : "[a-z0-9-]+"

    AdFsHostname:
        Type: String
        Description: Insert the hostname of your AD FS endpoint.
        AllowedPattern: "^[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Access Federation"
                Parameters:
                    - AdFsHostname
                    - CognitoDomain
        ParameterLabels:
            AdFsHostname:
                default: "AD FS hostname"
            CognitoDomain:
                default: "Amazon Cognito Domain"

Mappings:
    SourceCode:
        General:
            S3Bucket: "{{.S3BucketName}}"
    Solution:
        Data:
            SendAnonymousUsageData: "Yes"

Resources:
    DataLakeStorageStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !FindInMap ["SourceCode", "General", "S3Bucket"], "data-lake-storage.yaml"]]

    DataLakeUserPool:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "createUserPool"

    DataLakeServicesStack:
        DependsOn: "DataLakeUserPool"
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !FindInMap ["SourceCode", "General", "S3Bucket"], "data-lake-services.yaml"]]
            Parameters:
                UserPoolId: !GetAtt DataLakeUserPool.UserPoolId
                UserPoolClientId: !GetAtt DataLakeUserPool.UserPoolClientId
                SourceS3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
                FederatedLogin: true

    DataLakeApiStack:
        DependsOn: "DataLakeServicesStack"
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !FindInMap ["SourceCode", "General", "S3Bucket"], "data-lake-api.yaml"]]
            Parameters:
                AuthorizerArn: !GetAtt DataLakeServicesStack.Outputs.AuthorizerArn
                AdminArn: !GetAtt DataLakeServicesStack.Outputs.AdminArn
                CartArn: !GetAtt DataLakeServicesStack.Outputs.CartArn
                ProfileArn: !GetAtt DataLakeServicesStack.Outputs.ProfileArn
                SearchArn: !GetAtt DataLakeServicesStack.Outputs.SearchArn
                PackageArn: !GetAtt DataLakeServicesStack.Outputs.PackageArn

    DataLakeAppConfig:
        DependsOn:
            - "ConsoleCFDistribution"
            - "DataLakeUserPool"
            - "DataLakeApiStack"
            - "DataLakeStorageStack"
            - "DataLakeUuid"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            defaultS3Bucket: !Join ["", ["data-lake-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            appUrl: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
            idp: !GetAtt DataLakeUserPool.UserPoolId
            auditLogging: false
            cartAccessExpiration: 14400
            searchResultsLimit: 100
            apiEndpoint: !Join ["", ["https://", !GetAtt DataLakeApiStack.Outputs.ApiId, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com/prod" ]]
            esindex: "data-lake"
            esurl: !Join ["", ["https://", !GetAtt DataLakeStorageStack.Outputs.EsCluster ]]
            kmsKeyId: !Join ["", ["alias/datalake-", Ref: "AWS::Region" ]]
            anonymousData: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
            UUID: !GetAtt DataLakeUuid.UUID
            customAction: "loadAppConfig"

    DataLakeSearchIndex:
        DependsOn:
            - "DataLakeStorageStack"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            clusterUrl: !Join ["", ["https://", !GetAtt DataLakeStorageStack.Outputs.EsCluster ]]
            searchIndex: "data-lake"
            customAction: "configureSearch"

    DataLakeKibanaCognito:
        DependsOn:
            - "DataLakeUserPool"
            - "DataLakeStorageStack"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            cognitoDomain: !Ref CognitoDomain
            userPoolId: !GetAtt DataLakeUserPool.UserPoolId
            identityPoolId: !GetAtt DataLakeStorageStack.Outputs.CognitoKibanaIdentityPool
            roleArn: !GetAtt DataLakeStorageStack.Outputs.ConfigureRoleArn
            logGroupArn: !GetAtt DataLakeStorageStack.Outputs.DataLakeESLogGroup
            logGroupPolicyName: !Join ["", ["data-lake-es-logs-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            customAction: "updateElasticsearchDomainConfig"

    DataLakeS3Resources:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            dataLakeDefaultBucket: !Join ["", ["data-lake-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            dataLakeWebsiteBucket: !Join ["", ["datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            customAction: "configureDatalakeBuckets"

    DataLakeWebsite:
        DependsOn:
            - "DataLakeS3Resources"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            sourceS3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
            sourceS3key: "site"
            sourceSiteManifestS3key: "data-lake-site-manifest.json"
            destS3Bucket: !Join ["", ["datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            customAction: "configureWebsite"

    DataLakeWebsiteBucketPolicy:
        DependsOn:
            - "ConsoleCFOriginAccessIdentity"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            dataLakeWebsiteBucket: !Join ["", ["datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            consoleCanonicalUserId: !GetAtt ConsoleCFOriginAccessIdentity.S3CanonicalUserId
            customAction: "configureDatalakeBucketPolicy"

    DataLakeUuid:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "createUuid"

    DataLakeGlueResources:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            customAction: "cleanDataLakeGlueResources"

    DataLakeAnonymousMetric:
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            solutionId: "SO0017"
            UUID: !GetAtt DataLakeUuid.UUID
            version: "1"
            anonymousData: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
            customAction: "sendMetric"

    DataLakeHelperRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Join ["-", ["data-lake-helper-role", Ref: "AWS::Region" ]]
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "lambda.amazonaws.com"
                        Action:
                                - "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: "DataLakeHelperPolicy"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource:
                                    - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/data-lake-helper:*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:PutItem"
                                Resource:
                                    - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/data-lake-settings"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:Scan"
                                Resource:
                                    - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/data-lake-packages"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-idp:CreateUserPool"
                                # Resource being created now.
                                Resource:
                                    - "*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-idp:UpdateUserPool"
                                    - "cognito-idp:AddCustomAttributes"
                                    - "cognito-idp:CreateUserPoolClient"
                                    - "cognito-idp:AdminCreateUser"
                                    - "cognito-idp:UpdateUserPoolClient"
                                    - "cognito-idp:CreateUserPoolDomain"
                                    - "cognito-idp:CreateIdentityProvider"
                                    - "cognito-idp:DescribeUserPoolClient"
                                    - "cognito-idp:ListUserPoolClients"
                                    - "cognito-idp:UpdateUserPoolClient"
                                Resource:
                                    - !Join ["", ["arn:aws:cognito-idp:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":userpool/*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "es:ESHttpPut"
                                Resource:
                                    !Join ["", ["arn:aws:es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/data-lake/*"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "es:UpdateElasticsearchDomainConfig"
                                Resource:
                                    !Join ["", ["arn:aws:es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/data-lake"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                Resource:
                                    - "arn:aws:s3:::*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:PutObject"
                                    - "s3:ListObjects"
                                    - "s3:DeleteObject"
                                Resource:
                                    - !Join ["", ["arn:aws:s3:::datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*" ]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:CreateBucket"
                                    - "s3:DeleteBucket"
                                    - "s3:PutBucketPolicy"
                                    - "s3:ListObjects"
                                    - "s3:ListBucket"
                                    - "s3:PutBucketWebsite"
                                Resource:
                                    - !Join ["", ["arn:aws:s3:::datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:CreateBucket"
                                    - "s3:PutBucketCORS"
                                Resource:
                                    - !Join ["", ["arn:aws:s3:::data-lake-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                            -
                                Effect: "Allow"
                                Action:
                                    - "glue:DeleteDatabase"
                                    - "glue:DeleteCrawler"
                                # At the time of writing this service does not have ARNs, so * will be used
                                Resource: "*"
                            -
                                Effect: "Allow"
                                Action:
                                    - "iam:GetRole"
                                    - "iam:PassRole"
                                Resource:
                                    - !GetAtt DataLakeStorageStack.Outputs.ConfigureRoleArn
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:PutResourcePolicy"
                                    - "logs:DeleteResourcePolicy"
                                Resource:
                                    - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group::log-stream:*"]]

    DataLakeHelper:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
                S3Key: "data-lake-helper.zip"
            Description: "A data lake helper function for solution deployment"
            FunctionName: "data-lake-helper"
            Handler: "index.handler"
            MemorySize: "256"
            Role:
                Fn::GetAtt:
                    - "DataLakeHelperRole"
                    - "Arn"
            Runtime: "nodejs8.10"
            Timeout: "300"

    DataLakeDeployment:
        DependsOn: "DataLakeApiStack"
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: !GetAtt DataLakeApiStack.Outputs.ApiId
            Description: "Production"
            StageName: "prod"

    ConsoleCFOriginAccessIdentity:
        Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !GetAtt DataLakeUuid.UUID

    ConsoleCFDistribution:
        DependsOn:
            - "DataLakeWebsite"
            - "ConsoleCFOriginAccessIdentity"
        Type: "AWS::CloudFront::Distribution"
        Properties:
          DistributionConfig:
            Comment: "Distribution for AWS Data Lake console"
            DefaultCacheBehavior:
                AllowedMethods:
                    - HEAD
                    - DELETE
                    - POST
                    - GET
                    - OPTIONS
                    - PUT
                    - PATCH
                CachedMethods:
                    - HEAD
                    - GET
                Compress: true
                DefaultTTL: 0
                MaxTTL: 0
                MinTTL: 0
                ForwardedValues:
                    Cookies:
                        Forward: all
                    QueryString: true
                TargetOriginId: "S3-datalakeweb"
                ViewerProtocolPolicy : redirect-to-https
            DefaultRootObject: index.html
            HttpVersion: http2
            IPV6Enabled: true
            Origins:
                -
                    DomainName: !Join ["", ["datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", ".s3.", Ref: "AWS::Region", ".amazonaws.com"]]
                    Id: "S3-datalakeweb"
                    S3OriginConfig:
                        OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref ConsoleCFOriginAccessIdentity]]
            ViewerCertificate:
                CloudFrontDefaultCertificate: true
            Enabled: true

    AppVariables:
        DependsOn:
            - "DataLakeUserPool"
            - "DataLakeApiStack"
            - "ConsoleCFDistribution"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            userPoolId: !GetAtt DataLakeUserPool.UserPoolId
            userPoolClientId: !GetAtt DataLakeUserPool.UserPoolClientId
            apigEndpoint: !Join ["", ["https://", !GetAtt DataLakeApiStack.Outputs.ApiId, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com/prod" ]]
            appVersion: "latest"
            destS3Bucket: !Join ["", ["datalakeweb-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
            federatedLogin: true
            loginUrl: !Join ["", ["https://", !Ref CognitoDomain, ".auth.", Ref: "AWS::Region", ".amazoncognito.com/login?response_type=token&client_id=", !GetAtt DataLakeUserPool.UserPoolClientId, "&redirect_uri=https://", !GetAtt ConsoleCFDistribution.DomainName]]
            logoutUrl: !Join ["", ["https://", !Ref CognitoDomain, ".auth.", Ref: "AWS::Region", ".amazoncognito.com/logout?client_id=", !GetAtt DataLakeUserPool.UserPoolClientId, "&logout_uri=https://", !GetAtt ConsoleCFDistribution.DomainName]]
            customAction: "createAppVariables"

    FederateLogin:
        DependsOn:
            - "DataLakeUserPool"
            - "DataLakeKibanaCognito"
        Type: "Custom::LoadLambda"
        Properties:
            ServiceToken:
                Fn::GetAtt:
                    - "DataLakeHelper"
                    - "Arn"
            Region:
                - Ref: "AWS::Region"
            adFsHostname: !Ref AdFsHostname
            userPoolId: !GetAtt DataLakeUserPool.UserPoolId
            userPoolClientId: !GetAtt DataLakeUserPool.UserPoolClientId
            consoleUrl: !Join ["", ["https://", !GetAtt ConsoleCFDistribution.DomainName]]
            customAction: "federateAccess"

Outputs:
    ConsoleUrl:
        Description: "URL for the data lake console."
        Value: !Join ["", ["https://", !Ref CognitoDomain, ".auth.", Ref: "AWS::Region", ".amazoncognito.com/login?response_type=token&client_id=", !GetAtt DataLakeUserPool.UserPoolClientId, "&redirect_uri=https://", !GetAtt ConsoleCFDistribution.DomainName]]
    UserPoolId:
        Description: "Id of data lake Amazon Cognito User Pool."
        Value: !GetAtt DataLakeUserPool.UserPoolId
    UserPoolClientId:
        Description: "Id of data lake UI client app."
        Value: !GetAtt DataLakeUserPool.UserPoolClientId
    UUID:
        Description: "UUID for data lake deployment."
        Value: !GetAtt DataLakeUuid.UUID
    RelyingPartyURL:
        Description: "Relying party SAML 2.0 SSO service URL"
        Value: !Join ["", ["https://", !Ref CognitoDomain, ".auth.", Ref: "AWS::Region", ".amazoncognito.com/saml2/idpresponse"]]
    RelyingPartyTrustedIdentifier:
        Description: "Relying party trust identifier."
        Value: !Join ["", ["urn:amazon:cognito:sp:", !GetAtt DataLakeUserPool.UserPoolId]]
    LogoutTrustedURL:
        Description: "Configure this endpoint for consuming logout responses from your IdP."
        Value: !Join ["", ["https://", !Ref CognitoDomain, ".auth.", Ref: "AWS::Region", ".amazoncognito.com/saml2/logout"]]
    IdentityProvidersUrl:
        Description: "Link to Cognito page that contains the AD signing certificate."
        Value: !GetAtt FederateLogin.IdentityProvidersUrl
