{{$clusterName := .ClusterName | kebabcase}}

apiVersion: xl-release/v1
kind: Templates
spec:
- name: {{$clusterName}}
  type: xlrelease.Folder
  children:
  - name: {{$clusterName}}-ci-cd
    type: xlrelease.Release
    description: |
      Orchestrates the following blueprints:
      * aws/basic-eks-cluster
      * kubernetes/application
    tags:
    - AWS
    - EKS
    - {{$clusterName}}
    scriptUsername: !value XL_RELEASE_USERNAME
    scriptUserPassword: !value XL_RELEASE_PASSWORD

    variables:
    - key: control
      type: xlrelease.MapStringStringVariable
      requiresValue: false
      showOnReleaseStart: false
      value:
        namespace: {{.Namespace}}
        serviceName: {{.AppName}}-service

    - key: lbHostnameOrIp
      type: xlrelease.StringVariable
      requiresValue: false
      showOnReleaseStart: false

    - key: xld-admin-password
      type: xlrelease.PasswordStringVariable
      requiresValue: true
      showOnReleaseStart: false
      value: !value XL_DEPLOY_PASSWORD

    - type: xlrelease.StringVariable
      key: eksEndpoint
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: eksClusterName
      requiresValue: false
      showOnReleaseStart: false

    phases:
    - name: Provision Infrastructure
      type: xlrelease.Phase
      tasks:
      - name: Provision Lambda artifacts
        type: xlrelease.SequentialGroup
        tasks:
        - name: Create S3 bucket for lambda artifacts
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-LAMBDA/{{$clusterName}}-lambda-bucket/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
        - name: Upload lambda artifacts to S3
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-LAMBDA/{{$clusterName}}-lambda-artifacts/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
      - name: Provision AWS VPC and IAM resources
        type: xlrelease.ParallelGroup
        tasks:
        - name: Provision AWS IAM resources
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-CLOUDFORMATION/{{$clusterName}}-cloudformation-eks-user/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
        - name: Provision AWS VPC
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-CLOUDFORMATION/{{$clusterName}}-cloudformation-eks-vpc/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
      - name: Provision AWS EKS cluster
        type: xlrelease.SequentialGroup
        tasks:
        - name: Provision EKS master node
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-CLOUDFORMATION/{{$clusterName}}-cloudformation-eks-master/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
        - name: Tag namespace
          type: xld.UpdateCIProperty
          server: XL Deploy
          ciID: Infrastructure/{{$clusterName}}/{{$clusterName}}-master-EKSCluster/{{.Namespace}}
          ciProperty: tags
          propertyValue: '[ "{{.NamespaceTag}}" ]'
        - name: Provision EKS workers nodes
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-CLOUDFORMATION/{{$clusterName}}-cloudformation-eks-workers/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
        - name: Update workers dictionary for kube-system environment
          type: xld.UpdateCIProperty
          server: XL Deploy
          ciID: Environments/{{$clusterName}}/{{$clusterName}}-master-EKSCluster-kube-system
          ciProperty: dictionaries
          propertyValue: '[ "Environments/{{$clusterName}}/{{$clusterName}}-eks-workers-dictionary" ]'
        - name: Provision EKS config map for workers
          type: xldeploy.Deploy
          server: XL Deploy
          deploymentPackage: "{{$clusterName}}/EKS-CLOUDFORMATION/{{$clusterName}}-k8s-configmap/1.0.0"
          deploymentEnvironment: Environments/{{$clusterName}}/{{$clusterName}}-master-EKSCluster-kube-system

    - name: Deploy Application
      type: xlrelease.Phase
      tasks:

      - name: Deploy node
        type: xldeploy.Deploy
        server: XL Deploy
        deploymentPackage: {{.DockerImage}}/{{.DockerImageTag}}
        deploymentEnvironment: Environments/{{$clusterName}}/aws-cloudformation-{{$clusterName}}
        tags:
        - {{.NamespaceTag}}

    - name: Test
      type: xlrelease.Phase
      tasks:

      - name: Get service public URL
        type: xlrelease.SequentialGroup
        tasks:

        - name: Wait 120 seconds for load balancer to be ready
          type: xlrelease.ScriptTask
          script: |
            import time
            time.sleep(120)

        - name: Get K8s service specs
          type: xldeploy.Controltask
          server: XL Deploy
          numberOfContinueRetrials: 100
          pollingInterval: 10
          ciId: Infrastructure/{{$clusterName}}/{{$clusterName}}-master-EKSCluster
          taskName: describeService
          variableMapping:
            pythonScript.xlDeployTaskId: ${taskId}
            pythonScript.parameters: ${control}

        - name: Parse Store K8s service
          type: webhook.XmlWebhook
          URL: "{{.XLDUrlForXLR}}/deployit/tasks/v2/export"
          method: GET
          username: !value XL_DEPLOY_USERNAME
          xPathExpression: "/list/task[@id=\"${taskId}\"]//log/text()"
          variableMapping:
            pythonScript.result: ${taskOutput}
            pythonScript.password: ${xld-admin-password}

        - name: Get K8s service ip or hostname
          type: xlrelease.ScriptTask
          script: |
            import re
            m = re.search('hostname:(.*)\nip:([0-9.]+|None)', releaseVariables['taskOutput'])
            ipHostname = [m.group(1), m.group(2)]
            for item in ipHostname:
                if 'None' not in item:
                    releaseVariables['lbHostnameOrIp'] = item

      - name: Check application status
        type: xlrelease.ScriptTask
        script: |
          import urllib2
          import time
          req = urllib2.Request('http://${lbHostnameOrIp}')
          opener = urllib2.build_opener()
          response = opener.open(req)
          if response.getcode() == 200:
              print 'All instances are running'
          else:
              print 'Not all instances are running'
              exit(1)

      - name: Verify application
        type: xlrelease.GateTask
        team: Release Admin
        description: |
          The app is now live!
          Check out the website and complete this task when done.

          URL => http://${lbHostnameOrIp}
